// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// MzMLType is This is the root element for the Proteomics Standards Initiative (PSI) mzML schema, which is intended to capture the use of a mass spectrometer, the data generated, and the initial processing of that data (to the level of the peak list).
type MzMLType struct {
	XMLName                     xml.Name                         `xml:"mzMLType"`
	AccessionAttr               string                           `xml:"accession,attr,omitempty"`
	VersionAttr                 string                           `xml:"version,attr"`
	IdAttr                      string                           `xml:"id,attr,omitempty"`
	CvList                      *CVListType                      `xml:"cvList"`
	FileDescription             *FileDescriptionType             `xml:"fileDescription"`
	ReferenceableParamGroupList *ReferenceableParamGroupListType `xml:"referenceableParamGroupList"`
	SampleList                  *SampleListType                  `xml:"sampleList"`
	SoftwareList                *SoftwareListType                `xml:"softwareList"`
	ScanSettingsList            *ScanSettingsListType            `xml:"scanSettingsList"`
	InstrumentConfigurationList *InstrumentConfigurationListType `xml:"instrumentConfigurationList"`
	DataProcessingList          *DataProcessingListType          `xml:"dataProcessingList"`
	Run                         *RunType                         `xml:"run"`
}

// FileDescriptionType is This summarizes the different types of spectra that can be expected in the file. This is expected to aid processing software in skipping files that do not contain appropriate spectrum types for it. It should also describe the nativeID format used in the file by referring to an appropriate CV term.
type FileDescriptionType struct {
	FileContent    *ParamGroupType     `xml:"fileContent"`
	SourceFileList *SourceFileListType `xml:"sourceFileList"`
	Contact        []*ParamGroupType   `xml:"contact"`
}

// SourceFileListType is List and descriptions of the source files this mzML document was generated or derived from
type SourceFileListType struct {
	CountAttr  int               `xml:"count,attr"`
	SourceFile []*SourceFileType `xml:"sourceFile"`
}

// SourceFileType is Description of the source file, including location and type.
type SourceFileType struct {
	IdAttr       string `xml:"id,attr"`
	NameAttr     string `xml:"name,attr"`
	LocationAttr string `xml:"location,attr"`
	*ParamGroupType
}

// CVType is Information about an ontology or CV source and a short 'lookup' tag to refer to.
type CVType struct {
	IdAttr       string `xml:"id,attr"`
	FullNameAttr string `xml:"fullName,attr"`
	VersionAttr  string `xml:"version,attr,omitempty"`
	URIAttr      string `xml:"URI,attr"`
}

// CVListType is Container for one or more controlled vocabulary definitions.
type CVListType struct {
	CountAttr int       `xml:"count,attr"`
	Cv        []*CVType `xml:"cv"`
}

// ReferenceableParamGroupListType is Container for a list of referenceableParamGroups
type ReferenceableParamGroupListType struct {
	CountAttr               int                            `xml:"count,attr"`
	ReferenceableParamGroup []*ReferenceableParamGroupType `xml:"referenceableParamGroup"`
}

// ParamGroupType is Structure allowing the use of a controlled (cvParam) or uncontrolled vocabulary (userParam), or a reference to a predefined set of these in this mzML file (paramGroupRef).
type ParamGroupType struct {
	ReferenceableParamGroupRef []*ReferenceableParamGroupRefType `xml:"referenceableParamGroupRef"`
	CvParam                    []*CVParamType                    `xml:"cvParam"`
	UserParam                  []*UserParamType                  `xml:"userParam"`
}

// ReferenceableParamGroupType is A collection of CVParam and UserParam elements that can be referenced from elsewhere in this mzML document by using the 'paramGroupRef' element in that location to reference the 'id' attribute value of this element.
type ReferenceableParamGroupType struct {
	IdAttr    string           `xml:"id,attr"`
	CvParam   []*CVParamType   `xml:"cvParam"`
	UserParam []*UserParamType `xml:"userParam"`
}

// CVParamType is This element holds additional data or annotation. Only controlled values are allowed here.
type CVParamType struct {
	CvRefAttr         string `xml:"cvRef,attr"`
	AccessionAttr     string `xml:"accession,attr"`
	ValueAttr         string `xml:"value,attr,omitempty"`
	NameAttr          string `xml:"name,attr"`
	UnitAccessionAttr string `xml:"unitAccession,attr,omitempty"`
	UnitNameAttr      string `xml:"unitName,attr,omitempty"`
	UnitCvRefAttr     string `xml:"unitCvRef,attr,omitempty"`
}

// UserParamType is Uncontrolled user parameters (essentially allowing free text). Before using these, one should verify whether there is an appropriate CV term available, and if so, use the CV term instead
type UserParamType struct {
	NameAttr          string `xml:"name,attr"`
	TypeAttr          string `xml:"type,attr,omitempty"`
	ValueAttr         string `xml:"value,attr,omitempty"`
	UnitAccessionAttr string `xml:"unitAccession,attr,omitempty"`
	UnitNameAttr      string `xml:"unitName,attr,omitempty"`
	UnitCvRefAttr     string `xml:"unitCvRef,attr,omitempty"`
}

// ReferenceableParamGroupRefType is A reference to a previously defined ParamGroup, which is a reusable container of one or more cvParams.
type ReferenceableParamGroupRefType struct {
	RefAttr string `xml:"ref,attr"`
}

// SampleListType is List and descriptions of samples.
type SampleListType struct {
	CountAttr int           `xml:"count,attr"`
	Sample    []*SampleType `xml:"sample"`
}

// SampleType is Expansible description of the sample used to generate the dataset, named in sampleName.
type SampleType struct {
	IdAttr   string `xml:"id,attr"`
	NameAttr string `xml:"name,attr,omitempty"`
	*ParamGroupType
}

// InstrumentConfigurationListType is List and descriptions of instrument configurations. At least one instrument configuration must be specified, even if it is only to specify that the instrument is unknown. In that case, the "instrument model" term is used to indicate the unknown instrument in the instrumentConfiguration.
type InstrumentConfigurationListType struct {
	CountAttr               int                            `xml:"count,attr"`
	InstrumentConfiguration []*InstrumentConfigurationType `xml:"instrumentConfiguration"`
}

// ComponentType ...
type ComponentType struct {
	OrderAttr int `xml:"order,attr"`
	*ParamGroupType
}

// SourceComponentType is This element must be used to describe a Source Component Type. This is a PRIDE3-specific
//                 modification of the core MzML schema that does not have any impact on the base schema validation.
type SourceComponentType struct {
	*ComponentType
}

// DetectorComponentType is This element must be used to describe a Detector Component Type. This is a PRIDE3-specific
//                 modification of the core MzML schema that does not have any impact on the base schema validation.
type DetectorComponentType struct {
	*ComponentType
}

// AnalyzerComponentType is This element must be used to describe an Analyzer Component Type. This is a
//                 PRIDE3-specific
//                 modification of the core MzML schema that does not have any impact on the base schema validation.
type AnalyzerComponentType struct {
	*ComponentType
}

// ComponentListType is A detector component.
type ComponentListType struct {
	CountAttr int                      `xml:"count,attr"`
	Source    []*SourceComponentType   `xml:"source"`
	Analyzer  []*AnalyzerComponentType `xml:"analyzer"`
	Detector  []*DetectorComponentType `xml:"detector"`
}

// InstrumentConfigurationType is Description of a particular hardware configuration of a mass spectrometer. Each configuration must have one (and only one) of the three different components used for an analysis. For hybrid instruments, such as an LTQ-FT, there must be one configuration for each permutation of the components that is used in the document. For software configuration, use a ReferenceableParamGroup element.
type InstrumentConfigurationType struct {
	IdAttr              string             `xml:"id,attr"`
	ScanSettingsRefAttr string             `xml:"scanSettingsRef,attr,omitempty"`
	ComponentList       *ComponentListType `xml:"componentList"`
	SoftwareRef         *SoftwareRefType   `xml:"softwareRef"`
	*ParamGroupType
}

// SoftwareRefType is Reference to a previously defined software element
type SoftwareRefType struct {
	RefAttr string `xml:"ref,attr"`
}

// SoftwareListType is A piece of software.
type SoftwareListType struct {
	CountAttr int             `xml:"count,attr"`
	Software  []*SoftwareType `xml:"software"`
}

// SoftwareType is Software information.
type SoftwareType struct {
	IdAttr      string `xml:"id,attr"`
	VersionAttr string `xml:"version,attr"`
	*ParamGroupType
}

// DataProcessingListType is List and descriptions of data processing applied to this data.
type DataProcessingListType struct {
	CountAttr      int                   `xml:"count,attr"`
	DataProcessing []*DataProcessingType `xml:"dataProcessing"`
}

// DataProcessingType is Description of the default peak processing method. This element describes the base method used in the generation of a particular mzML file. Variable methods should be described in the appropriate acquisition section - if no acquisition-specific details are found, then this information serves as the default.
type DataProcessingType struct {
	IdAttr           string                  `xml:"id,attr"`
	ProcessingMethod []*ProcessingMethodType `xml:"processingMethod"`
}

// ProcessingMethodType ...
type ProcessingMethodType struct {
	OrderAttr       int    `xml:"order,attr"`
	SoftwareRefAttr string `xml:"softwareRef,attr"`
	*ParamGroupType
}

// ScanSettingsListType is List with the descriptions of the acquisition settings applied prior to the start of data acquisition.
type ScanSettingsListType struct {
	CountAttr    int                 `xml:"count,attr"`
	ScanSettings []*ScanSettingsType `xml:"scanSettings"`
}

// ScanSettingsType is Target list (or 'inclusion list') configured prior to the run.
type ScanSettingsType struct {
	IdAttr            string                 `xml:"id,attr"`
	SourceFileRefList *SourceFileRefListType `xml:"sourceFileRefList"`
	TargetList        *TargetListType        `xml:"targetList"`
	*ParamGroupType
}

// TargetListType is Target list (or 'inclusion list') configured prior to the run.
type TargetListType struct {
	CountAttr int               `xml:"count,attr"`
	Target    []*ParamGroupType `xml:"target"`
}

// RunType is All chromatograms for this run.
type RunType struct {
	IdAttr                                string                `xml:"id,attr"`
	DefaultInstrumentConfigurationRefAttr string                `xml:"defaultInstrumentConfigurationRef,attr"`
	DefaultSourceFileRefAttr              string                `xml:"defaultSourceFileRef,attr,omitempty"`
	SampleRefAttr                         string                `xml:"sampleRef,attr,omitempty"`
	StartTimeStampAttr                    string                `xml:"startTimeStamp,attr,omitempty"`
	SpectrumList                          *SpectrumListType     `xml:"spectrumList"`
	ChromatogramList                      *ChromatogramListType `xml:"chromatogramList"`
	*ParamGroupType
}

// SourceFileRefType ...
type SourceFileRefType struct {
	RefAttr string `xml:"ref,attr"`
}

// SourceFileRefListType is Reference to a previously defined sourceFile.
type SourceFileRefListType struct {
	CountAttr     int                  `xml:"count,attr"`
	SourceFileRef []*SourceFileRefType `xml:"sourceFileRef"`
}

// SpectrumListType is List and descriptions of spectra.
type SpectrumListType struct {
	CountAttr                    int             `xml:"count,attr"`
	DefaultDataProcessingRefAttr string          `xml:"defaultDataProcessingRef,attr"`
	Spectrum                     []*SpectrumType `xml:"spectrum"`
}

// ScanWindowListType is A range of m/z values over which the instrument scans and acquires a spectrum.
type ScanWindowListType struct {
	CountAttr  int               `xml:"count,attr"`
	ScanWindow []*ParamGroupType `xml:"scanWindow"`
}

// ScanListType is List and descriptions of scans.
type ScanListType struct {
	CountAttr int         `xml:"count,attr"`
	Scan      []*ScanType `xml:"scan"`
	*ParamGroupType
}

// ScanType is Container for a list of scan windows.
type ScanType struct {
	SpectrumRefAttr                string              `xml:"spectrumRef,attr,omitempty"`
	SourceFileRefAttr              string              `xml:"sourceFileRef,attr,omitempty"`
	ExternalSpectrumIDAttr         string              `xml:"externalSpectrumID,attr,omitempty"`
	InstrumentConfigurationRefAttr string              `xml:"instrumentConfigurationRef,attr,omitempty"`
	ScanWindowList                 *ScanWindowListType `xml:"scanWindowList"`
	*ParamGroupType
}

// PrecursorListType is List and descriptions of precursor isolations to the spectrum currently being described, ordered.
type PrecursorListType struct {
	CountAttr int              `xml:"count,attr"`
	Precursor []*PrecursorType `xml:"precursor"`
}

// PrecursorType is The type and energy level used for activation.
type PrecursorType struct {
	SpectrumRefAttr        string               `xml:"spectrumRef,attr,omitempty"`
	SourceFileRefAttr      string               `xml:"sourceFileRef,attr,omitempty"`
	ExternalSpectrumIDAttr string               `xml:"externalSpectrumID,attr,omitempty"`
	IsolationWindow        *ParamGroupType      `xml:"isolationWindow"`
	SelectedIonList        *SelectedIonListType `xml:"selectedIonList"`
	Activation             *ParamGroupType      `xml:"activation"`
}

// SelectedIonListType is The list of selected precursor ions.
type SelectedIonListType struct {
	CountAttr   int               `xml:"count,attr"`
	SelectedIon []*ParamGroupType `xml:"selectedIon"`
}

// ProductListType is List and descriptions of product isolations to the spectrum currently being described, ordered.
type ProductListType struct {
	CountAttr int            `xml:"count,attr"`
	Product   []*ProductType `xml:"product"`
}

// ProductType is This element captures the isolation (or 'selection') window configured to isolate one or more ions.
type ProductType struct {
	IsolationWindow *ParamGroupType `xml:"isolationWindow"`
}

// BinaryDataArrayListType is Data point arrays for default data arrays (m/z, intensity, time) and meta data arrays. Default data arrays must not have the attributes 'arrayLength' and 'dataProcessingRef'.
type BinaryDataArrayListType struct {
	CountAttr       int                    `xml:"count,attr"`
	BinaryDataArray []*BinaryDataArrayType `xml:"binaryDataArray"`
}

// BinaryDataArrayType is The actual base64 encoded binary data. The byte order is always 'little endian'.
type BinaryDataArrayType struct {
	ArrayLengthAttr       int    `xml:"arrayLength,attr,omitempty"`
	DataProcessingRefAttr string `xml:"dataProcessingRef,attr,omitempty"`
	EncodedLengthAttr     int    `xml:"encodedLength,attr"`
	Binary                []byte `xml:"binary"`
	*ParamGroupType
}

// SpectrumType is The structure that captures the generation of a peak list (including the underlying acquisitions). Also describes some of the parameters for the mass spectrometer for a given acquisition (or list of acquisitions).
type SpectrumType struct {
	IdAttr                 string                   `xml:"id,attr"`
	SpotIDAttr             string                   `xml:"spotID,attr,omitempty"`
	IndexAttr              int                      `xml:"index,attr"`
	DefaultArrayLengthAttr int                      `xml:"defaultArrayLength,attr"`
	DataProcessingRefAttr  string                   `xml:"dataProcessingRef,attr,omitempty"`
	SourceFileRefAttr      string                   `xml:"sourceFileRef,attr,omitempty"`
	ScanList               *ScanListType            `xml:"scanList"`
	PrecursorList          *PrecursorListType       `xml:"precursorList"`
	ProductList            *ProductListType         `xml:"productList"`
	BinaryDataArrayList    *BinaryDataArrayListType `xml:"binaryDataArrayList"`
	*ParamGroupType
}

// ChromatogramListType is List of chromatograms.
type ChromatogramListType struct {
	CountAttr                    int                 `xml:"count,attr"`
	DefaultDataProcessingRefAttr string              `xml:"defaultDataProcessingRef,attr"`
	Chromatogram                 []*ChromatogramType `xml:"chromatogram"`
}

// ChromatogramType is A single chromatogram.
type ChromatogramType struct {
	IdAttr                 string                   `xml:"id,attr"`
	IndexAttr              int                      `xml:"index,attr"`
	DefaultArrayLengthAttr int                      `xml:"defaultArrayLength,attr"`
	DataProcessingRefAttr  string                   `xml:"dataProcessingRef,attr,omitempty"`
	Precursor              *PrecursorType           `xml:"precursor"`
	Product                *ProductType             `xml:"product"`
	BinaryDataArrayList    *BinaryDataArrayListType `xml:"binaryDataArrayList"`
	*ParamGroupType
}

// MzML is This is a reference to an instrument configuration in instrumentConfigurationList. It ensures that an id is present in the file and is one of the values defined in KEY_IC_ID.
type MzML *MzMLType
