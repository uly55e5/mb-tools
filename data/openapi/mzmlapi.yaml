openapi: 3.0.3
info:
  title: Title
  description: Title
  version: 1.0.0
servers:
  - url: 'http://localhost:8091'
components:
  schemas:
    msDataId:
      type: string
    chromatogramId:
      type: integer

  parameters:
    msDataId:
      in: path
      name: msDataId
      description: the identifier for the MS data from mzML file
      schema:
        $ref: '#/components/schemas/msDataId'
      required: true
    chromatogramId:
      in: path
      name: chromatogramId
      description: the identifier of a chromatogram
      schema:
        $ref: '#/components/schemas/chromatogramId'
      required: true

paths:
  /file:
    post:
      operationId: postFile
      description: Sent a file to the server
      requestBody:
        content:
          application/xml:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/msDataId'

  /msdata/{msDataId}/filename:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getFileName
      responses:
        200:
          description: get filename
          content:
            application/json:
              schema:
                type: object
                properties:
                  filename:
                    type: string


  /msdata/{msDataId}/instrument:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getInstrumentData
      responses:
        200:
          description: get instrument data
          content:
            application/json:
              schema:
                type: object

  /msdata/{msDataId}/instrument/analyzer:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getInstrumentAnalyzer
      responses:
        200:
          description: get analyzer
          content:
            application/json:
              schema:
                type: object
                properties:
                  analyzer:
                    type: string

  /msdata/{msDataId}/instrument/detector:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getInstrumentDetector
      responses:
        200:
          description: get detector
          content:
            application/json:
              schema:
                type: object
                properties:
                  detector:
                    type: string

  /msdata/{msDataId}/instrument/ionisation:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getIonisationMethod
      responses:
        200:
          description: get ionisation
          content:
            application/json:
              schema:
                type: object
                properties:
                  ionisation:
                    type: string

  /msdata/{msDataId}/instrument/manufacturer:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getInstrumentManufacturer
      responses:
        200:
          description: get manufacturer
          content:
            application/json:
              schema:
                type: object
                properties:
                  manufacturer:
                    type: string

  /msdata/{msDataId}/instrument/model:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getInstrumentModel
      responses:
        200:
          description: get model
          content:
            application/json:
              schema:
                type: object
                properties:
                  model:
                    type: string

  /msdata/{msDataId}/instrument/sample:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getSampleData
      responses:
        200:
          description: get sample
          content:
            application/json:
              schema:
                type: object
                properties:
                  sample:
                    type: string

  /msdata/{msDataId}/instrument/software:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getSoftware
      responses:
        200:
          description: get software
          content:
            application/json:
              schema:
                type: object
                properties:
                  software:
                    type: string

  /msdata/{msDataId}/instrument/source:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getSource
      responses:
        200:
          description: get source
          content:
            application/json:
              schema:
                type: object
                properties:
                  source:
                    type: string

  /msdata/{msDataId}/scans:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getScansData
      responses:
        200:
          description: get scans
          content:
            application/json:
              schema:
                type: object
                properties:
                  scans:
                    type: array
                    items:
                      type: integer

  /msdata/{msDataId}/scans/{id}/header:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getScanHeader
      responses:
        200:
          description: get scan header
          content:
            application/json:
              schema:
                type: object

  /msdata/{msDataId}/scans/{id}/peaks:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getScanPeaks
      responses:
        200:
          description: get peaks
          content:
            application/json:
              schema:
                type: object
                properties:
                  peaks:
                    type: array
                    items:
                      type: number

  /msdata/{msDataId}/scans/{id}/peaks/count:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getScanPeakCount
      responses:
        200:
          description: get peak count
          content:
            application/json:
              schema:
                type: object
                properties:
                  peakCount:
                    type: integer

  /msdata/{msDataId}/scans/count:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getScanCount
      responses:
        200:
          description: get scan count
          content:
            application/json:
              schema:
                type: object
                properties:
                  scanCount:
                    type: integer

  /msdata/{msDataId}/IsolationWindow:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getIsolationWindows
      responses:
        200:
          description: get isolation windows
          content:
            application/json:
              schema:
                type: object
                properties:
                  IsolationWindows:
                    type: array
                    items:
                      type: object
                      properties:
                        low:
                          type: number
                        high:
                          type: number

  /msdata/{msDataId}/chromatograms:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getChromatograms
      responses:
        200:
          description: get chromatograms
          content:
            application/json:
              schema:
                type: object

  /msdata/{msDataId}/chromatograms/count:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: getChromatogramCount
      responses:
        200:
          description: get chromatogram count
          content:
            application/json:
              schema:
                type: object
                properties:
                  chromatogramCount:
                    type: integer

  /msdata/{msDataId}/chromatograms/{chromatogramId}:
    parameters:
      - $ref: '#/components/parameters/msDataId'
      - $ref: '#/components/parameters/chromatogramId'
    get:
      operationId: getChromatogramData
      responses:
        200:
          description: get chromatogram
          content:
            application/json:
              schema:
                type: object


  /msdata/{msDataId}/chromatograms/{chromatogramId}/header:
    parameters:
      - $ref: '#/components/parameters/msDataId'
      - $ref: '#/components/parameters/chromatogramId'
    get:
      operationId: getChromatogramHeader
      responses:
        200:
          description: get chromatogram header
          content:
            application/json:
              schema:
                type: object

  /msdata/{msDataId}/3dmap:
    parameters:
      - $ref: '#/components/parameters/msDataId'
    get:
      operationId: get3dMap
      responses:
        200:
          description: get 3D map
          content:
            application/json:
              schema:
                type: object


